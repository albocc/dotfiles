[user]
	# Forces user.email and user.name configuration variables to always be set
	# when committing, useful when using multiple email addresses.
	useconfigonly = true

[core]
	editor = vim
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	autocrlf = input

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	# [custom] blank lines at eof are okay
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space,-blank-at-eof

	# Make 'git rebase' safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Git and the Umlaut problem on Mac OS X
	# Prevent showing files which filenames contains umlauts as untracked
	# Needs to be 'false' since OS X 10.9.x
	precomposeunicode = true

[color]
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	# User colorized output in Git commands (default since Git 1.8.4)
	ui = auto

[color "status"]
	untracked = yellow	# Default is red

[commit]
#	template = ~/.stCommitMsg

[push]
	default = simple
	# Make 'git push' push relevant annotated tags when pushing branches out
	followTags = true

#[filter "lfs"]
#	clean = git-lfs clean %f
#	smudge = git-lfs smudge %f
#	required = true

[alias]
# General
	s = status -s
	st = status
	pull = pull --ff-only
	# You don't always want to blame them
	praise = blame

# Checkout
	co = checkout
	# Creating a branch with 'cb' prefixed by my username
	cb = "!f() { git checkout -b $(git config --get user.name)/$@; }; f"

# Diff
	staged = diff --cached

# Staging
	ap = add -p

# Commit
	amend = commit --amend

# Rebase
	rbi = rebase --interactive
	rba = rebase --abort
	rbc = rebase --continue

# Log
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	# Show who made the most commits because why not?
	leaderbord = shortlog -sn
	# Show the last 10 branches that I have worked on
	recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"
	# Show today's accomplishments
	today = log --all --oneline --no-merges --author=`git config --get user.email`

