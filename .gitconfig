[user]
	# Forces user.email and user.name configuration variables to always be set
	# when committing, useful when using multiple email addresses.
	useconfigonly = true

[core]
	editor = vim
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	autocrlf = input
	pager = less -S

[pager]
	log = diff-highlight | less -S
	show = diff-highlight | less -S
	diff = diff-highlight | less -S

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	whitespace = blank-at-eol,space-before-tab,indent-with-non-tab,-blank-at-eof

[color]
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	# User colorized output in Git commands (default since Git 1.8.4)
	ui = auto

[color "status"]
	untracked = yellow	# Default is red

[commit]
#	template = ~/.stCommitMsg

[push]
	default = simple
	# Make 'git push' push relevant annotated tags when pushing branches out
	followTags = true

#[filter "lfs"]
#	clean = git-lfs clean %f
#	smudge = git-lfs smudge %f
#	required = true

[alias]
# General
	s = status -s
	st = status
	pull = pull --ff-only --prune
	# You don't always want to blame them
	praise = blame

# Checkout
	co = checkout
	# Creating a branch with 'cb' prefixed by my username
	cb = "!f() { git checkout -b $(git config --get user.name)/$@; }; f"
	cof = "!f() { [ ${1:?'Search pattern missing'} ] && git co `git branch -a | grep -E \"feature/.*$@\" | awk 'NR==1{print $1}'`; }; f"	# checkout feature

# Branch
	# Create feature branch
	cfb = "!f() { [ ${1:?'Arg missing'} ] && git checkout -b feature/$(sed 's/ä/ae/g; s/ö/oe/g; s/ü/ue/g; s/[^a-zA-Z0-9-]/_/g; s/__/_/g' <<< \"$@\"); }; f"
	# Delete local branch (capital D means force)
	dlb = "!f() { git branch -d ${1:?'Branch name missing'}; }; f"
	Dlb = "!f() { git branch -D ${1:?'Branch name missing'}; }; f"
	# Delete remote branch (including remote tracking brach)
	drb = "!f() { git push --delete ${2-'origin'} ${1:?'Branch name missing'}; git branch --delete --remotes ${2-'origin'}/${1} }; f"
	# Delete merged branches
	dmb = "!f() { git branch --merged | egrep -v '(^*|master)' | xargs git branch -d;}; f"

# Diff/Show
	staged = diff --cached
	# Diff between two commits below HEAD
	dh = "!f() { git diff HEAD~${2:?'Arg missing'} HEAD~$1; }; f"
	cs = "!f() { git rev-list --pretty=oneline `git merge-base ${1:?'Refspec for \"Since\" missing'} ${2-'HEAD'}`...${2-'HEAD'}; }; f"		# Commits since
	cso = "!f() { git cs origin/$(git rev-parse --abbrev-ref HEAD); }; f" # Commits since push to origin

# Staging
	unstage = reset HEAD --
	addr = "!f() { git add \\*$@\\*; }; f"
	ap = add -p
	apr = "!f() { git add -p \\*$@\\*; }; f"
	rp = reset -p

# Stashing
	stash = "!git stash --include-untracked"
	stashp = stash pop

# Commit
	cm = "!f() { git commit -F - <<< \"$@\"; }; f"
	amend = commit --amend
	fixup = "!f() { git commit --fixup=$1 ${@:2}; }; f"

# Rebase
	rbi = rebase --interactive --rebase-merges
	# Rebase interactive the last n commits
	rbih = "!f() { git rbi HEAD~${1:?'Arg missing'}; }; f"
	# Rebase interactive since merge-base with branch
	rbib = "!f() { git rbi $(git merge-base $(git rev-parse --abbrev-ref HEAD) ${1:?'Branch name missing'}); }; f"
	rba = rebase --abort
	rbc = rebase --continue
	rbs = rebase --skip

# Reset
	discard = checkout --
	rs = reset --soft
	# Reset soft n commits below HEAD
	rsh = "!f() { git rs HEAD~${1:?'Arg missing'}; }; f"
	rh = reset --hard
	# Reset hard n commits below HEAD
	rhh = "!f() { git rh HEAD~${1:?'Arg missing'}; }; f"

# Merge
	conflicts = "!f() { git format-patch $(git merge-base HEAD ${1:?'Arg missing'})..$1 --stdout | git apply --check -; }; f"

# Log
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	logo = log --pretty=oneline
	# Show who made the most commits because why not?
	leaderboard = shortlog -sn
	# Show the last 10 branches that I have worked on
	recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"
	# Show today's accomplishments
	today = "!git log --all --oneline --no-merges --author=`git config --get user.email` --since 'Today at 8 am'"
	yesterday = "!git log --all --oneline --no-merges --author=`git config --get user.email` --since 'Yesterday at 8 am' --until 'Today at 8 am'"

